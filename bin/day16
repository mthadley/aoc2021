#!/usr/bin/env ruby
require_relative "../environment"

require "stringio"

part1 answer: 866 do
  io = StringIO.new(input.chop.to_padded_hex)
  Packet.read(io).version_sum
end

part2 do
  io = StringIO.new(input.chop.to_padded_hex)
  Packet.read(io).value
end

class Packet
  attr_reader :version, :type_id

  def self.read(io)
    version = io.read(3).to_i(2)
    type_id = io.read(3).to_i(2)

    klass = case type_id
            when 4 then Literal
            else        Operator
            end

    packet = klass.new(version: version, type_id: type_id)
    packet.read(io)
    packet
  end

  def initialize(version:, type_id:)
    @version = version
    @type_id = type_id
  end

  def len = 3 + 3 # version + type_id

  def version_sum = version

  class Literal < Packet
    attr_reader :value

    def read(io)
      val = ""
      @val_len = 0

      loop do
        is_end = io.read(1) == "0"
        val << io.read(4)
        @val_len += 5
        break if is_end
      end

      @value = val.to_i(2)
    end

    def len = super + @val_len
  end

  class Operator < Packet
    attr_reader :packets, :len_type_id

    def read(io)
      @packets = []
      @len_type_id = io.read(1).to_i(2)

      case len_type_id
      in 0 then
        total = io.read(15).to_i(2)
        packets << Packet.read(io) until packets_len == total
      in 1 then
        total = io.read(11).to_i(2)
        packets << Packet.read(io) until packets.count == total
      end
    end

    def value
      case type_id
      in 0 then packets.sum(&:value)
      in 1 then packets.map(&:value).inject(:*)
      in 2 then packets.map(&:value).min
      in 3 then packets.map(&:value).max
      in 5
        first, second = packets
        first.value > second.value ? 1 : 0
      in 6
        first, second = packets
        first.value < second.value ? 1 : 0
      in 7
        first, second = packets
        first.value == second.value ? 1 : 0
      end
    end

    def len
      super +
        1 + # len_type_id
        case len_type_id
        in 0 then 15
        in 1 then 11
        end +
        packets_len
    end

    def packets_len = packets.sum(&:len)

    def version_sum = super + packets.sum(&:version_sum)
  end
end

class String
  def to_padded_hex
    chars.map do |char|
      char.to_i(16).to_s(2).rjust(4, "0")
    end.join
  end
end

__END__

